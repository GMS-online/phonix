{"name":"Phonix","tagline":"Phonetic libray for .NET","body":"Welcome to Phonix\r\n======\r\n\r\nA Phonetic open source libray for .NET, no dependencies, it is pure C# code ;)\r\n\r\nLatest Version\r\n--------------\r\n\r\nThe quickest way to get the latest release of Phonix is to add it to your project using \r\nNuGet (<http://nuget.org/List/Packages/Phonix>).\r\n\r\nImplemented algorithms\r\n----------------\r\n\r\nToday Phonix implements the following algorithms:\r\n\r\n* Caverphone [http://en.wikipedia.org/wiki/Caverphone] - Created by David Hood, the algorithm is optimised for accents.\r\n* Double Metaphone [http://en.wikipedia.org/wiki/Metaphone] - Phonetic encoding algorithm is the second generation of the Metaphone algorithm\r\n* Metaphone [http://en.wikipedia.org/wiki/Metaphone] - Published by Lawrence Philips in 1990, for indexing words by their English pronunciation.\r\n* Match Rating [http://en.wikipedia.org/wiki/Match_rating_approach] - Is a phonetic algorithm developed by Western Airlines in 1977 for the indexation and comparison of homophonous names\r\n* Soundex [http://en.wikipedia.org/wiki/Soundex] - Is a phonetic algorithm for indexing names by sound, as pronounced in English.\r\n\r\nHow to use\r\n---------------\r\n\r\nBelow there are examples on how to use the MatchRating, DoubleMetaphone and Soundex algorithms:\r\n\r\n```\r\n\r\n    using Phonix;\r\n    \r\n    public class MatchRatingApproachTests\r\n    {\r\n        private static readonly string[] Words = new[] { \"Spotify\", \"Spotfy\", \"Sputfy\",\"Sputfi\" };\r\n\r\n        readonly MatchRatingApproach _generator = new MatchRatingApproach();\r\n       \r\n        public void Should_Be_Similar()\r\n        {\r\n            Console.Writeline(_generator.IsSimilar(Words));\r\n        }\r\n    }\r\n    \r\n    public class SoundexTests\r\n    {\r\n        private static readonly string[] Words = new[] { \"Spotify\", \"Spotfy\", \"Sputfi\", \"Spotifi\" };\r\n        private static readonly string[] Words2 = new[] { \"United Air Lines\", \"United Aire Lines\", \"United Air Line\" };\r\n\r\n        readonly Soundex _generator = new Soundex();\r\n\r\n        public void Should_Be_Similar()\r\n        {\r\n            Console.Writeline(_generator.IsSimilar(Words));\r\n            Console.Writeline(_generator.IsSimilar(Words2));\r\n        }\r\n    }\r\n    \r\n    public class DoubleMetaphoneTests\r\n    {\r\n        private static readonly string[] Words = new[] {\"Spotify\", \"Spotfy\", \"Sputfi\", \"Spotifi\"};\r\n        private static readonly string[] Words2 = new[] { \"United Air Lines\", \"United Aire Lines\", \"Unitid Air Line\"};\r\n\r\n        readonly DoubleMetaphone _generator =  new DoubleMetaphone();\r\n              \r\n        public void Should_Return_Same_Keys()\r\n        {\r\n            string[][] keys =  new string[Words.Length][];\r\n            for (int n = 0; n < Words.Length; n++)\r\n            {\r\n                keys[n] =  _generator.BuildKeys(Words[n]);\r\n            }\r\n\r\n            for (int n = 0; n < Words.Length; n++)\r\n            {\r\n                for (int m = 0; m < keys[n].Length; m++)\r\n                {\r\n                    if (n > 0)\r\n                    {\r\n                        Console.Writeline(keys[n][m], keys[n - 1][m]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            string[][] keys2 = new string[Words2.Length][];\r\n            for (int n = 0; n < Words2.Length; n++)\r\n            {\r\n                keys2[n] = _generator.BuildKeys(Words2[n]);\r\n            }\r\n\r\n            for (int n = 0; n < Words2.Length; n++)\r\n            {\r\n                for (int m = 0; m < keys2[n].Length; m++)\r\n                {\r\n                    Console.WriteLine(keys2[n][m]);\r\n                    if (n > 0)\r\n                    {\r\n                        Console.Writeline(keys2[n][m], keys2[n - 1][m]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}